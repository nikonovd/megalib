module Owncloud

import C
import NSIS

/* Owncloud enables the synchronization of files across multiple clients.
It further supports conflict detection, simple version control and IOScheduling to handle the 
synchronization. A policy states which files are supposed to synchronized. */
URL : ReferenceLanguage;
    = "https://en.wikipedia.org/wiki/Uniform_Resource_Locator".
FileSynchronization : AbstractProcess;
    = "https://en.wikipedia.org/wiki/File_synchronization".
SynchronizedFile : Role;
    = "https://en.wikipedia.org/wiki/File_synchronization".
ConflictDetection : AbstractProcess;
    = "http://www.tgrmn.com/web/kb/item35.htm".
VersionControl : AbstractProcess;
    = "https://en.wikipedia.org/wiki/Version_control".
IOScheduling : AbstractProcess;
    = "https://en.wikipedia.org/wiki/I/O_scheduling".
OwnCloud : Software;
    = "https://en.wikipedia.org/wiki/OwnCloud";
    = "https://en.wikipedia.org/wiki/Comparison_of_file_synchronization_software";
    uses FileSynchronization;
    uses ConflictDetection;
    uses VersionControl;
    uses IOScheduling;
    implements URL.

/* OwnCloud uses various languages. The program is written mostly in C++, C, Objective-C, 
Perl and some bits of PHP. For the deployment process, NSIS and C-Make are used. */   
Perl : ProgrammingLanguage;
    = "https://en.wikipedia.org/wiki/Perl".
PerlInterpreter : Platform;
    = "https://en.wikipedia.org/wiki/Perl#Implementation";
    implements Perl;
    uses C.
PHP : ProgrammingLanguage;
    = "https://en.wikipedia.org/wiki/PHP".
OwncloudPolicyLanguage : ConfigurationLanguage;
    = "https://github.com/owncloud/core/blob/5ce66c4d5f9a895bec41f56f7cc96661eec00ae6/config/config.sample.php";
    subsetOf PHP.
PHPInterpreter : Platform;
    = "https://secure.php.net/docs.php";
    = "https://en.wikipedia.org/wiki/PHP";
    implements PHP;
    uses C.
OwnCloud uses C++;
    uses C;
    uses Objective-C;
    uses Perl;
    uses NSIS;
    uses C-Make;
    implements OwncloudPolicyLanguage.

/* The server communicates with the connected filesystems using the client software. In this
use case we have two clients and one server involved. */
OwnCloud uses Client-Server.
OwnCloudServer : Software;
    = "https://github.com/owncloud/core";
    partOf OwnCloud;
    uses C++;
    uses C;
    uses Objective-C;
    uses Perl;
    uses NSIS;
    uses C-Make;
    implements OwncloudPolicyLanguage.
OwnCloudClient : Software;
    = "https://de.wikipedia.org/wiki/OwnCloud#Sync-Clients";
    uses C++;
    uses C;
    uses Objective-C;
    uses Perl;
    uses NSIS;
    uses C-Make;
    partOf OwnCloud.
?webServer : FileSystem;
    reuses OwnCloudServer.
?fileSystem1 : FileSystem;
    reuses OwnCloudClient.
?fileSystem2 : FileSystem;
    reuses OwnCloudClient.

/* A file is uploaded in the first file system and then downloaded due to the synchronization
process by the second client. The sharing policy states that synchronization for this file
is enabled. */
?l : FileFormat.
?file1 : Artifact;
    elementOf ?l;
    hasRole SynchronizedFile;
    manifestsAs File;
    partOf ?fileSystem1.
?file2 : Artifact;
    elementOf ?l;
    hasRole SynchronizedFile;
    manifestsAs File;
    partOf ?fileSystem2;
    correspondsTo ?file1.  // equality
?sharingAllowedPolicy : Artifact;
    elementOf OwncloudPolicyLanguage;
    hasRole Configuration;
    manifestsAs File;
    partOf ?webServer.
share : URL # OwncloudPolicyLanguage # ?l -> ?l.
OwnCloud implements share.
?serverurl1 : Artifact;
    elementOf URL;
    hasRole Reference;
    manifestsAs Fragment;
    partOf ?fileSystem1. //don't know where
?serverurl2 : Artifact;
    elementOf URL;
    hasRole Reference;
    manifestsAs Fragment;
    partOf ?fileSystem2;
    correspondsTo ?serverurl1.
share(?serverurl1,?sharingAllowedPolicy,?file1) |-> ?file2.