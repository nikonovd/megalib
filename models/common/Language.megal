module common.Language

import common.Concept

/* A language is a set of syntactic entities. This not only includes
entities having a concrete syntax but runtime data as well.
Language subtypes based on PRIMARY purpose. LaTeX could be used
to code up a general purpose program as well, but hopefully none does
that. That is why it is classified as a markup language. */
Language < Entity;
    = "https://en.wikipedia.org/wiki/Computer_language".
FileFormat < Language; // not meant to be read by humans. Optimized for file system, e.g., an SQL image or JPG.
    = "https://en.wikipedia.org/wiki/File_format".
ProgrammingLanguage < Language;  // not specific to a domain, e.g., Java
    = "https://en.wikipedia.org/wiki/Programming_language".
DataRepresentationLanguage < Language; // can be read by humans and represents data, e.g., JSON
    = "https://de.wikipedia.org/wiki/Datenformat". //need better binding
MarkupLanguage < Language;  // assists in structuring data, e.g., XML
    = "https://en.wikipedia.org/wiki/Markup_language".
TransformationLanguage < Language; // transformation statements, e.g., ATL
    = "https://en.wikipedia.org/wiki/Transformation_language". // even though the text is misleading
QueryLanguage < Language; // query statements, e.g., SQL
    = "https://en.wikipedia.org/wiki/Query_language".
StylesheetLanguage < Language; // expresses presentation of structured documents, e.g., CSS
    = "https://en.wikipedia.org/wiki/Style_sheet_language".
GrammarLanguage < Language; //define syntax of a language
    = "https://en.wikipedia.org/wiki/Formal_grammar".
SchemaLanguage < Language; // formulate schemas or metamodels, e.g., XSD
    = "https://en.wikipedia.org/wiki/Category:Data_modeling_languages".
CommandLineLanguage < Language;  // statements that can be entered in a command line, e.g., Bash
    = "https://en.wikipedia.org/wiki/Command-line_interface".
ModelingLanguage < Language;  // describe or prescribe software, e.g., UML
    = "https://en.wikipedia.org/wiki/Modeling_language".
MachineLanguage < Language; // hardware instructions
    = "https://en.wikipedia.org/wiki/Machine_code".
AssemblyLanguage < Language;
    = "https://en.wikipedia.org/wiki/Assembly_language".
ConfigurationLanguage < Language; // configuration files, e.g., .classpath-files
    = "https://en.wikipedia.org/wiki/Configuration_file" .
BuildLanguage < Language; //languages used for writing build scripts
    = "https://en.wikipedia.org/wiki/Build_automation".
ReferenceLanguage < Language; // express references, e.g., URI
    = "https://en.wikipedia.org/wiki/Reference".
MessageLanguage < Language; // structured messages, e.g., HTTP Requests
    = "https://en.wikipedia.org/wiki/Message_passing".
KnowledgeRepresentationLanguage < Language; //represent knowledge by using structured vocabulary, e.g., OWL
    = "https://en.wikipedia.org/wiki/Category:Knowledge_representation_languages".
DomainSpecificLanguage < Language; //The purpose is specific to the domain it is used in
    = "https://en.wikipedia.org/wiki/Domain-specific_language".
Data < Language; // simple run time data, e.g. Booleans or Integers. Defined by a type.
    = "https://en.wikipedia.org/wiki/Data_type".
ObjectGraph < Language; // object values in an OO Language, e.g. Java Objects.
    = "https://en.wikipedia.org/wiki/Object_graph".
Graphics < Language; //!! Experimental !! visual images consisting of pixels that inform, illustrate or entertain
    = "https://en.wikipedia.org/wiki/Graphics".
ContainerFormat < Language; //A binary format to express containment used by archives
    = "https://en.wikipedia.org/wiki/Digital_container_format".
TemplateLanguage < Language;
    = "https://en.wikipedia.org/wiki/Template_processor".

/* Subset according to set theory. This is only used when only a subset can be processed 
as function input or only a subset is implemented by a technology. */
subsetOf < Language # Language;
    = "https://en.wikipedia.org/wiki/Subset".
    
/* One language may be embedded into another. */
embeddedInto < Language # Language;
    = "https://wiki.haskell.org/Embedded_domain_specific_language".

/* A language may be a small variation of another language */
dialectOf < Language # Language;
    = "https://en.wikipedia.org/wiki/Dialect_(computing)".

/* A language's evolution is inspired by other languages */
influencedBy < Language # Language;
    = "http://brendangriffen.com/gow-programming-languages.html". 

/* A language belongs to a set of technical solutions in application scenarios */
belongsTo < Language # TechnologySpace;
    = "https://www.researchgate.net/publication/228580557_Technological_Spaces_An_Initial_Appraisal".

/* A language offers support for the context of a well known problem space */
supports < Language # ProgrammingDomain.

/* A language has constructs that allow programming in a certain mindset */
facilitates < Language # Paradigm.

/* A language family consists of multiple related languages.
A language family has one ascendant and multiple descendants.
Descendants are languages that are influenced by the ascendant.*/
LanguageFamily < Entity;
    = "https://en.wikipedia.org/wiki/Category:Programming_language_families".
ascendantOf < Language # LanguageFamily.
descendantOf < Language # LanguageFamily.

/* A representation defines the format, in which a language is presented in. */
Representation < Entity;
    = "https://en.wikipedia.org/wiki/File_format".
hasRepresentation < Language # Representation. //TODO: This needs a link...
Text : Representation;
    = "http://www.iue.tuwien.ac.at/phd/fasching/node26.html".
Binary : Representation;
    = "http://www.iue.tuwien.ac.at/phd/fasching/node27.html".
Visual : Representation;
    = "https://en.wikipedia.org/wiki/Data_visualization".
Markup : Representation;
    = "https://en.wikipedia.org/wiki/Markup_language".
Graph : Representation;
    = "https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)".
Tree : Representation;
    = "https://en.wikipedia.org/wiki/Tree_(graph_theory)".
///* A language can be encoded into another language */
//encodedInto < Language # Language;
//    = "".