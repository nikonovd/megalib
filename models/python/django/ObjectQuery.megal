module python.django.ObjectQuery

/* 
ModelViewController : DesignPattern
ObjectRelationalMapping  : ProgrammingDomain
Django facilitates ModelViewController
Django.Models : Framework
Django.Models uses Python
Django.Models partOf Django
Django.Models supports ObjectRelationalMapping 

?BookSystem : WebApplication
?BookSystem uses Django
?BookClass : Artifact<Python,MvcModel,File>
?BookClass partOf ?BookSystem

?books : Artifact<PythonObject,Value,Transient>
?books conformsTo ?BookClass
?filteredBooks : Artifact<PythonObject,Value,Transient>
?filteredBooks conformsTo ?BookClass
?filteredBooks partOf ?books

DjangoQuery : QueryLanguage
?Class : Role // vague
?QueryingClass : Artifact<Python,?Class,File>
?NameEqualsNothing : Artifact<DjangoQuery,Query,Fragment>
?NameEqualsNothing manifestsAs Transient
?NameEqualsNothing embeddedInto ?QueryingClass
filter : DjangoQuery # PythonObject -> PythonObject
filter(?NameEqualsNothing,?books) |-> ?filteredBooks
Django implements filter


Django = "https://www.djangoproject.com/"
Django.Models = "https://docs.djangoproject.com/en/1.10/topics/db/models/"
Python = "https://docs.python.org/2/reference/"
PythonObject = "https://docs.python.org/2/reference/"
ModelViewController = "http://dbpedia.org/page/Model%E2%80%93view%E2%80%93controller"
ObjectRelationalMapping  = "https://en.wikipedia.org/wiki/Object-relational_mapping"
DjangoQuery = "https://docs.djangoproject.com/es/1.10/topics/db/queries/"
*/
?Python : ProgrammingLanguage.
Django : Framework;
    = "https://www.djangoproject.com/";
    supports WebApplicationDevelopment;
    uses ?Python.