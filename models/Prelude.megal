module Prelude

import common.Concept
import common.Language


/* Digital entities classified by relating to their language, role and manifestation. */
Artifact < Entity;
    = "https://en.wikipedia.org/wiki/Artifact_(software_development)".
defines < Artifact # Language; // An artifact may serve as the specification for a language, e.g., a grammar.
    = "https://en.wikipedia.org/wiki/Programming_language_specification";
    = "https://en.wikipedia.org/wiki/Syntax";
    = "https://en.wikipedia.org/wiki/Data_model".
elementOf < Artifact # Language; // Every artifact is a member of a language
    = "https://en.wikipedia.org/wiki/Element_(mathematics)".
conformsTo < Artifact # Artifact;  // An artifact may conform to a schema 
    = "http://link.springer.com/article/10.1007%2Fs10270-006-0017-9";
    = "https://www.researchgate.net/publication/243771569_In_Search_of_a_Basic_Principle_for_Model_Driven_Engineering".
correspondsTo < Artifact # Artifact; // Two artifacts may be syntactically different, but semantically equal.
    = "http://dictionary.cambridge.org/dictionary/english/correspond".
refersTo < Artifact # Artifact;  // Experimental! Don't use unless you know what you're doing
    = "https://en.wikipedia.org/wiki/Uniform_Resource_Identifier".
represents < Artifact # Artifact; // Experimental! Don't use unless you know what you're doing
    = "https://www.researchgate.net/publication/243771569_In_Search_of_a_Basic_Principle_for_Model_Driven_Engineering".

/* Manifestation types of artifacts, where most are self-explanatory */
Manifestation < Entity;
    = "https://en.oxforddictionaries.com/definition/manifestation".
File : Manifestation; // a single file
    = "https://en.wikipedia.org/wiki/Computer_file".
File+ : Manifestation; // a set of files
    = "https://en.wikipedia.org/wiki/Computer_file".
Folder : Manifestation; //a folder
    = "https://en.wikipedia.org/wiki/Directory_(computing)".
Transient : Manifestation; //Temporary available values
    = "https://en.wikipedia.org/wiki/Transient_(computer_programming)".
Fragment : Manifestation;  //Some fragment of a file or transient
    = "https://en.wikipedia.org/wiki/Snippet_(programming)".
manifestsAs < Artifact # Manifestation;
    = "https://en.oxforddictionaries.com/definition/manifestation".

/* Roles relate to the domain's or technological space's 
terminology. They imply a commonly known purpose 
that might even be defined in terms of a design or architectural
pattern. */
Role < Entity;
    = "https://en.wikipedia.org/wiki/Artifact_(software_development)";
    = "https://en.wikipedia.org/wiki/Terminology".
hasRole < Artifact # Role; //Relating the artifact to an existing term known in a domain
    = "https://en.wikipedia.org/wiki/Terminology".


/* A role may be set in the context of a domain or a technological space */
aspectOf < Role # ProgrammingDomain.
aspectOf < Role # TechnologySpace.

/* Structural parts of pattern are often referred to as participants. */
participantOf < Role # DesignPattern;
    = "https://en.wikipedia.org/wiki/Software_design_pattern#Structure".
participantOf < Role # ArchitecturalPattern;
    = "https://en.wikipedia.org/wiki/Architectural_pattern".

/* Frequently appearing roles */
Configuration : Role;   //settings statements.
    = "https://en.wikipedia.org/wiki/Configuration_file".
BuildScript : Role; //Scripts for deploying software such as ANT or Maven files
    = "https://en.wikipedia.org/wiki/Software_build".
Grammar : Role;   //syntax definition
    = "https://en.wikipedia.org/wiki/Context-free_grammar".
Database : Role;  //any artifact that only stores data
    = "https://en.wikipedia.org/wiki/Database".
Schema : Role;  //provide a schema
    = "https://en.wikipedia.org/wiki/Database_schema".
Query : Role;  //a search declaration to satisfy information needs of software or humans
    = "https://en.wikipedia.org/wiki/Query_language".
MdeModel : Role; // in the sense of MDE
    = "https://en.wikipedia.org/wiki/Model-driven_engineering".
MdeMetamodel : Role; // in the sense of MDE
    = "https://en.wikipedia.org/wiki/Metamodeling".
Diagram : Role; //a visual representation of a model
    = "https://en.wikipedia.org/wiki/Diagram".
MvcModel : Role; //data classes plus minor business logics
    = "https://en.wikipedia.org/wiki/Model-view-controller".
MvcView : Role; //classes that serve as the interface to the user as they produce visual output. Most times there is some render() function
    = "https://en.wikipedia.org/wiki/Model-view-controller".
MvcController : Role; //Some kind of mediator between model and view, which may execute rather complex computations
    = "https://en.wikipedia.org/wiki/Model-view-controller".
Value : Role; //A runtime value in the execution process of a program
    = "https://en.wikipedia.org/wiki/Value_(computer_science)".
Message : Role; //A message in a communication of software components
    = "https://en.wikipedia.org/wiki/Message_passing".
Specification : Role; //Defines some other conceptual entity in either half-formal or formal manner
    = "https://en.wikipedia.org/wiki/Specification_(technical_standard)".
Log : Role; //Contains runtime information that is additionally gathered.
    = "https://en.wikipedia.org/wiki/Logfile".
DescriptiveModel : Role;  //A model that describes existing software
    = "http://www.businessdictionary.com/definition/descriptive-model.html".
TransformationRule : Role; //A definition for a text- or model-transformation that declares data manipulations.
    = "http://101companies.org/wiki/Transformation".
Reference : Role; //links to some existing entity.
    = "https://en.wikipedia.org/wiki/Reference".
SourceCode : Role; // An implementation of functionality
    = "https://en.wikipedia.org/wiki/Source_code".
ByteCode : Role; //instructions for a software interpreter such as the JVM
    = "https://en.wikipedia.org/wiki/Bytecode".
Executable : Role; //Any artifact that is executed and not only used.
    = "https://en.wikipedia.org/wiki/Executable".
WebResource : Role; // Contains information and is deployed on a web server.
    = "https://en.wikipedia.org/wiki/Web_resource".
Archive : Role; //A file that has folder functionality, such as .jar or .zip
    = "https://en.wikipedia.org/wiki/Archive_file".
Document : Role; //An informal file that is deployed locally 
    = "https://en.wikipedia.org/wiki/Document".
Repository : Role; //A database that manages code artifacts and acts as a VCS
    = "https://en.wikipedia.org/wiki/Repository_(version_control)".
Module : Role;
    = "https://en.wikipedia.org/wiki/Modular_programming".
Interface : Role;
    = "https://en.wikipedia.org/wiki/Protocol_(object-oriented_programming)". //weird
TestCase : Role;
    = "https://en.wikipedia.org/wiki/Test_case".
POJO : Role;
    = "https://en.wikipedia.org/wiki/Plain_Old_Java_Object".
Template : Role;
    = "https://en.wikipedia.org/wiki/Template_processor".
Wrapper : Role;
    = "https://en.wikipedia.org/wiki/Primitive_wrapper_class".

/* A mapping from an ordered list of input languages to an ordered list of output languages. */
Function < Entity;
    = "https://en.wikipedia.org/wiki/Function_(mathematics)".

/* A technology is a reusable . 
Technologies can be classified along 2 Dimensions: 
1.) The kind of use (Code reuse as in libraries vs executable code as 
in a program vs both as in frameworks) 
2.) Whether it is a part or a standalone piece of software. */
Technology < Entity;
    = "https://www.journals.elsevier.com/information-and-software-technology/".
Library < Technology; //contains a set of reusable functions.
    = "https://en.wikipedia.org/wiki/Library_(computing)".
API < Library; //Reusable code that facilitates the use of another technology/language. (Local API !)
    = "https://en.wikipedia.org/wiki/Application_programming_interface".
Framework < Technology; //facilitates the realization of specific use cases most times through code generation
    = "https://en.wikipedia.org/wiki/Software_framework".
Plugin < Technology; // as an extension to another technology
    = "https://en.wikipedia.org/wiki/Plug-in_(computing)".
Component < Technology; // as part of a composed technology
    = "https://en.wikipedia.org/wiki/Component-based_software_engineering#Software_component".
Software < Technology; //a technology that consists of multiple programs and is deployed locally
    = "https://en.wikipedia.org/wiki/Software".
SoftwareSuite < Software; // a software collection that is deployed and managed together
    = "https://en.wikipedia.org/wiki/Software_suite".
WebService < Software;  // software deployed at a server, communication via HTTP
    = "https://en.wikipedia.org/wiki/Web_service".
Program < Software; // a software that implements only one process that is needed in distinct use cases.
    = "https://en.wikipedia.org/wiki/Computer_program".
IDE < Software; // an environment to facilitate writing systems or technologies.
    = "https://en.wikipedia.org/wiki/Integrated_development_environment".
Workbench < Software;
    = "https://en.wikipedia.org/wiki/Language_workbench".
Platform < Software; // a technology that can evaluate code
    = "https://en.wikipedia.org/wiki/Computing_platform".

/* Implementation relationships */
implements < Technology # Function;  //A technology may implement a mapping
    = "https://en.wikipedia.org/wiki/Implementation".
implements < Technology # Language.  //A technology can process a language as input or output
implements < Artifact # Function. //Necessary?

/* A technology may help in a problem context */
supports < Technology # ProgrammingDomain;
    = "https://en.wikipedia.org/wiki/Software_feature". //needs better link

/* Technologies and languages may be frequently used in a technological context . */
belongsTo < Technology # TechnologySpace.

/* A technology is managed by an artifact that serves as a repository. */
managedBy < Technology # Artifact; 
    = "https://en.wikipedia.org/wiki/Software_repository".

/* In a usage scenario the technology is locally deployed as an artifact. */
deployedAs < Technology # Artifact; 
    = "https://en.wikipedia.org/wiki/Software_deployment".

/* A set of artifacts that realizes concrete use cases. */
System < Entity; 
    = "https://en.wikipedia.org/wiki/Software_system".
Application < System; // a professionally coordinated set of artifacts that are deployed locally
    = "https://en.wikipedia.org/wiki/Application_software".
WebApplication < System; // a professionally coordinated set of artifacts that are deployed on a web server
    = "https://en.wikipedia.org/wiki/Web_application".
UserFiles < System;  //A set of files managed by the user instead of being coordinated as program input or output.
    = "https://en.wikipedia.org/wiki/User_(computing)".

/* A system as an exemplary solution for a field of study */
demonstrates < System # ProgrammingDomain; 
    = "http://softlang.uni-koblenz.de/chrestomathy/".


/* Part-of relationships */
partOf < Artifact # Artifact;
    = "http://dictionary.cambridge.org/dictionary/english/part".
partOf < Artifact # System.
partOf < Artifact # Technology.
partOf < Technology # Technology.
partOf < System # System.

/* A language is used in the sense that some part is a member of the language. Maybe rename to writtenIn */
uses < System # Language;
    = "https://en.wikipedia.org/wiki/Computer_programming".
uses < Technology # Language.

/* Re-usable forms of solutions can be used */
uses < System # DesignPattern.
uses < System # ArchitecturalPattern.
uses < System # AbstractProcess.
uses < System # Construct.
uses < Technology # DesignPattern.
uses < Technology # ArchitecturalPattern.
uses < Technology # AbstractProcess.
uses < Technology # Construct.
uses < Artifact # DesignPattern.
uses < Artifact # ArchitecturalPattern.
uses < Artifact # AbstractProcess.
uses < Artifact # Construct.

/* Re-usable forms of solutions can be used in the sense of realization. */
realizes < System # DesignPattern.
realizes < System # ArchitecturalPattern.
realizes < System # AbstractProcess.
realizes < System # Construct.
realizes < Technology # DesignPattern.
realizes < Technology # ArchitecturalPattern.
realizes < Technology # AbstractProcess.
realizes < Technology # Construct.
realizes < Artifact # DesignPattern.
realizes < Artifact # ArchitecturalPattern.
realizes < Artifact # AbstractProcess.
realizes < Artifact # Construct.

/* A technology or a language can facilitate the usage of ideal forms of solutions */
facilitates < Technology # DesignPattern.
facilitates < Technology # ArchitecturalPattern.
facilitates < Technology # AbstractProcess.
facilitates < Technology # Construct.

/* Systems, technologies and artifacts can be reused. There is always a reference from the using
entity to the used entity. Maybe rename to reuses */
reuses < System # System;
    = "https://en.wikipedia.org/wiki/Code_reuse".
reuses < System # Technology.
reuses < Technology # Technology.
reuses < Artifact # System.
reuses < Artifact # Technology.

/* PDF file format has frequent appearence everywhere. */
PDF : FileFormat;
    = "https://en.wikipedia.org/wiki/Portable_Document_Format".
adobePDFSpec : Artifact;
    = "http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf";
    elementOf PDF;
    hasRole Specification;
    manifestsAs File;
    defines PDF.